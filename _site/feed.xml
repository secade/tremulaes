<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Singer</title>
    <description>A land of code, coffee, but practically no common sense.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 22 Jan 2017 14:42:26 -0600</pubDate>
    <lastBuildDate>Sun, 22 Jan 2017 14:42:26 -0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Arbitrary</title>
        <description>&lt;p&gt;Two years ago today, I was likely working a double-shift at a call center in Columbus, Ohio. The first half would have been providing internal IT support for the center- everything from basic hardware maintenance (“Your computer turned off because you kicked it so hard the power cord came out”) to building custom scripts for the varied clients, to helping maintain some of the physical server infrastructure that we kept in house. The second shift would have been on the boards themselves, taking calls, likely overnight, thanks to the unlimited OT policy at the time.&lt;/p&gt;

&lt;p&gt;It worked out well for me, though my time at that call center really pushed me past the breaking point every once in a while- you know, a few times a week. Two years ago today, I would be knee-deep in the remote, part-time portion of the code school I was planning to attend with the hopes that it would help transform my professional life into something more satisfying and fiscally solvent. I would have rarely seen my friends during that time, but many of the wonderful people in my life supported me endlessly- treating me to Chipotle, buying me a few beers, and pushing me to continue working my ass off to get where I wanted to be.&lt;/p&gt;

&lt;h2 id=&quot;now&quot;&gt;Now&lt;/h2&gt;

&lt;p&gt;Now, two years later, I feel that the emotions and stresses of 2015 are so distant and foggy that I can barely remember the personal cost of those challenges- it’s easy to forget the pain because the outcome has been so positive. I am thankful for the opportunities I’ve had to not only change my career entirely, but also continue moving forward and growing as an individual and as a professional. 2017 looks to be a challenging year, but one with an enormous potential for the success I desire.&lt;/p&gt;

&lt;p&gt;I’ve set a few goals to take me where I want to be over the next [arbitrary unit of time]:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Debt-free by 30 (October of this year)&lt;/li&gt;
  &lt;li&gt;Establish a process for taking on private contract work as a developer and have at least two successful contracts&lt;/li&gt;
  &lt;li&gt;Continue focusing on my physical, mental, and fiscal health be exercising and eating healthily on a regular basis&lt;/li&gt;
  &lt;li&gt;Spend time giving back to causes that I care about by taking a leadership role in a local volunteer organization&lt;/li&gt;
  &lt;li&gt;Read a book every two weeks&lt;/li&gt;
  &lt;li&gt;Watch a new movie every two weeks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goals are always arbitrary, but I find I do best with some concept of metrics assigned to my goals. There’s not much of a rush for anything, and there’s no desperate need to accomplish any one of these particular things by some arbitrary deadline, but I hope to report positively on the development of the above list over the next [arbitrary unit of time].&lt;/p&gt;

&lt;p&gt;Thanks to all who have helped, bolstered, assisted, or confided in me. I’m looking forward to the next steps.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 08:44:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2017/01/22/arbitrary.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/01/22/arbitrary.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Retro</title>
        <description>&lt;p&gt;In October, I jumped at the opportunity to (voluntarily) relocate to Chicago to help my company bootstrap their Chicago office. At the time, they were interviewing and hiring a team of engineers to function as a satellite portion of the product team. I knew several of the team up there, and was excited because I could not only help start the new office, but also move to Chicago without the stress of a new job. It was a real win-win, especially with all the traction our product team had been picking up.&lt;/p&gt;

&lt;p&gt;3 days after I started working out of Chicago, our CEO was swapped out. A few weeks later, our CPO and recently hired CTO were swapped out. A week before Thanksgiving, I, along with most of engineering and a significant portion of Operations were all let go with a one-day notice.&lt;/p&gt;

&lt;p&gt;It’s been a ride, and stressful and frustrating to say the least. Though I’m sad to say that I won’t be working with many of my wonderful coworkers at my next job, I’m excited to be joining AvantCredit’s Chicago team, working inside their engineering core to help build out their product. Excited, nervous- and extremely thankful for the many awesome people who helped me interview and eventually get the job.&lt;/p&gt;

&lt;p&gt;This round of interviewing, six months into a new career and in a new city, has been very enlightening. I’ve been trying to process it all in a little-a ‘agile’ manner, intending to use the overall experience as a retrospective for my first steps into my career, and I think it’s been enlightening.&lt;/p&gt;

&lt;h1 id=&quot;entitlement&quot;&gt;Entitlement&lt;/h1&gt;

&lt;p&gt;There’s a lot of talk about entitled engineers in the software space, and I always shook my head in this invisible force in disgust- how can you take for granted the perks and pleasures of a stable job and high salary? What kind of inhuman monster ends up like that?&lt;/p&gt;

&lt;p&gt;Well, only six months into the field and I already found myself spinning down that rabbit hole of entitlement. My expectations were unreasonable, and I definitely believed myself to be more skilled, savvy and employable than I actually was. I still recognized that I was a junior developer, but not one of &lt;em&gt;those&lt;/em&gt; junior developers. I was better, more aware, and overall more valuable than others of my cohort.&lt;/p&gt;

&lt;p&gt;Bubble burst quick: people started saying no, and I was left wondering how I could have gotten so off base. Instead of being grateful and excited about the opportunities before me, I was disdainful and whiny. I had lost perspective.&lt;/p&gt;

&lt;h1 id=&quot;humility&quot;&gt;Humility&lt;/h1&gt;

&lt;p&gt;It’s been a humbling experience, and more than ever, I’m thankful for the grounded and loving people in my life who help me to remember that I’m not hotshit and I’m not world class- at least not yet. This experience has given me the opportunity to reexamine my values and my goals, to learn from the last six months, and to enter into my new team with a fresh, ambitious and realistic attitude.&lt;/p&gt;

&lt;p&gt;The past few months have been stressful and the settling into a new home has been a little tougher than expected, but just like &lt;a href=&quot;https://en.wikipedia.org/wiki/GLaDOS&quot;&gt;GLaDOS&lt;/a&gt;, I am &lt;a href=&quot;https://www.youtube.com/watch?v=Y6ljFaKRTrI&quot;&gt;still alive&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 08:44:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2015/12/10/retro.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/12/10/retro.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Minimalism in Software</title>
        <description>&lt;p&gt;When writing software, it’s easy to want to plan for the future. We have to plan for edgecases of all varieties, build our applications to be scalable and resilient enough to operate under every scenario that we can imagine. Software servicing hospitals, for example, need to be available 100% of the time and the solutions to providing that level of uptime are complex and expensive, but it’s essential that these services are available without fail for the hospital to run efficiently. Lives depend on it.&lt;/p&gt;

&lt;p&gt;But what happens when we start to plan out for things that &lt;em&gt;aren’t&lt;/em&gt; strictly necessary? What happens when we start pumping in additional complexity because we likely will need to handle it in the future, or simply think that we will? Or when we use tools that aren’t appropriate for the use case at hand? What happens when considering extensibility of a codebase crosses into the territory of trying to predict the future?&lt;/p&gt;

&lt;p&gt;We waste time. On the surface, bits of time wasted here and there may not seem like they’re too concerning, but time is perhaps our rarest resource of all. Minecraft is a beautiful lesson in understanding that no capital is more valuable than time itself. Neil Fiore says it best:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s a myth that time is money. In fact, time is more precious than money. It’s a nonrenewable resource. Once you’ve spent it, and if you’ve spent it badly, it’s gone forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Approaching software and application development from a minimalistic mindset can, in the end, save yourself and your team a great deal of stress, money, and even better, time itself.&lt;/p&gt;

&lt;h2 id=&quot;the-second-expression-of-minimalism&quot;&gt;The Second Expression of Minimalism&lt;/h2&gt;

&lt;p&gt;There are two primary ways in which minimalism can be achieved: first, in doing no more than necessary, and second, using tools that best suit the situation, or choosing to build one if no such tool exists.&lt;/p&gt;

&lt;p&gt;Laziness is often lauded as one of the chief personality traits of a software engineer, and it’s perhaps one of the most important. Writing no more lines of code than the situation at hand demands, adding in no additional features, and allowing the core concept shine through are important at any stage of product development, regardless of the domain. Be minimal, be small.&lt;/p&gt;

&lt;p&gt;Just because you know a feature is coming down the pipeline later on doesn’t mean you should begin building a place for it in your codebase. Plans change, pieplines are disrupted and roadmaps are set on fire &lt;em&gt;every day&lt;/em&gt; for all sorts of reasons, and when you’ve made room for a feature that is never implemented, you’re left with a gaping hole of dependencies and anti-patterns that can leave your spaghetti code leaky. This is a commonly taught and understood principle in software design.&lt;/p&gt;

&lt;p&gt;But even beyond “Be lazy and do as little as possible”, choosing inappropriate tools to solve your problems can lead to much of the same waste. I recently had the pleasure of working on a codebase in a Perl MVC framework called Catalyst. Originally designed as a scripting interpreter, Perl grew in popularity due to it’s core tenets of “There’s more than one way to do it” and “Easy things should be easy and hard things should be possible.” In it’s original conception, Perl was a great solution for a wide variety of problems due to its flexibility.&lt;/p&gt;

&lt;p&gt;But then it grew too flexible. As new versions came out, it gained features and paradigms from other frameworks, until Object Oriented Programming was slapped on top of the otherwise procedural language. Eventually, frameworks were built out of the core language, and thus the Catalyst MVC web framework was born, and years later I found myself frustrated.&lt;/p&gt;

&lt;p&gt;Perl was not originally intended for this use case at all, and it’s strengths and weaknesses no longer lined up with its use case as an MVC framework. When compared with languages much more suited for web development (Ruby and Python are great examples), Perl feels unwieldy &lt;em&gt;because&lt;/em&gt; it is unwieldy. Regardless of what made sense in the past, the reality is that better tools exist now to solve the problems that Catalyst use to solve. The issue isn’t that Perl was designed to solve all of these problems, is that we are continuing to try to use it to solve problems that it is no longer the best tool to solve.&lt;/p&gt;

&lt;p&gt;Even Rails provides a good illustration of tools not suiting needs as they change. It is often stated that “Rails doesn’t scale well”, and Twitter is held up as an example of why Rails fails after a certain load breakpoint. Older versions of Rails likely &lt;em&gt;weren’t&lt;/em&gt; very scalable; it’s original use case was nowhere near the scale of where web applications like Facebook and Twitter are at today. However, Rails has responded and, in line with other technological advancements, now can provide fast, scalable ecosystems that works for many use cases in modern web applications. In this case, the tool evolved to continue solving the problems as they themselves changed over time.&lt;/p&gt;

&lt;p&gt;As more and more ground in the technical space is exposed and explored, companies like Facebook, Microsoft, Amazon and Google are finding that existing tools are no longer sufficient to solve their problems. Instead, they build out their own internal solutions and often share their solutions with the world with some form of OSS. Sometimes they adopt and improve on existing tools, but other times they build out new languages, frameworks or ecosystems, all to solve the problem &lt;em&gt;at hand&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reading-the-future&quot;&gt;Reading the future&lt;/h2&gt;

&lt;p&gt;Minimalism will likely always be a core tenet in software. So long as knowing the future is impossible, building expectations for the future beyond core extensibility remains impractical. As plans change, people change, the domain changes and requirements change, sometimes in very rapid succession, the sure-to-be-needed feature may get tossed aside for other more pressing concerns.&lt;/p&gt;

&lt;p&gt;As people writing software, it’s not our job to be clairvoyant; it’s simply to solve problems. Let’s make sure we’re solving the problem at hand.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Nov 2015 06:51:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2015/11/14/minimalism.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/11/14/minimalism.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Static Site Setup Tutorial</title>
        <description>&lt;h2 id=&quot;using-jekyll-wercker-and-aws-to-get-a-static-site-hosted-for-cheap&quot;&gt;Using Jekyll, Wercker, and AWS to get a static site hosted for cheap&lt;/h2&gt;

&lt;p&gt;I love static websites. They’re served very fast and security is practically not even a concern- no database to hack, no data to mine, nothing to pull or inject or mess with at all. This site was my first attempt at building a static site from nearly scratch, picking technologies that I barely understood and somehow stringing them together without really having much of a clue at all as to how anything worked.&lt;/p&gt;

&lt;p&gt;After setting up a second site on the same stack, very thoughtfully and with a better understanding of what I’m doing, I thought I’d share some of the process to setting up your own static website using Jekyll as your static site generator, Wercker as your autodeployment tool, and AWS S3 as your host. Note that this isn’t an in-depth tutorial for using every individual tool, just a guide on linking everything together.&lt;/p&gt;

&lt;h4 id=&quot;why-any-of-this&quot;&gt;Why any of this?&lt;/h4&gt;

&lt;p&gt;I chose to host and build my site this way for a variety of reasons. First, I was a brand new development student and the tools were simple enough for me to learn from experimenting with them. Second, I &lt;em&gt;like&lt;/em&gt; being in control of my site and knowing how it all works instead of using one of the common hosting solutions like godaddy or hostgator. Third, I wanted to learn- all of the tools helped me understand some valuable basics of creating and maintaining websites, all of which has helped a great deal in my time since working on both static sites and dynamic web applications.&lt;/p&gt;

&lt;h4 id=&quot;why-these&quot;&gt;Why these?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Jekyll&lt;/p&gt;

    &lt;p&gt;Jekyll is a terrific static site generator that benefits from Ruby knowledge for more in-depth customization but doesn’t require it to get a clean looking site up and running. I did no Ruby customization of any kind for this site. Jekyll also allows for writing most pages/posts in markdown which saves some time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Github/Bitbucket&lt;/p&gt;

    &lt;p&gt;Version control should be used on pretty much everything- I’ve even started using it for writing projects on private repos. I use Github for any public or open-source projects I have, and Bitbucket for anything I want private. You will need to use one or the other for hooking up your codebase to Wercker.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wercker&lt;/p&gt;

    &lt;p&gt;Wercker has a clean and easy-to-use interface, and their recent move over to using Docker for their build boxes is exciting for any build trouble-shooting that you may need to do for more advanced setup (though we’ll be using their classic box setup for this tutorial). Their configuration is relatively light for static site building, and it integrates smoothly with Jekyll and AWS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AWS S3&lt;/p&gt;

    &lt;p&gt;AWS is fast and reliable, and access to their CDN means that your site will be served quickly pretty much anywhere. Using S3 is extremely cheap as you pay by volume of storage instead of other metrics. It’s also very easy to configure, and Amazon docs for their AWS products are terrific.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DNS&lt;/p&gt;

    &lt;p&gt;You can choose your own DNS provider, but as I’m hosting on AWS I chose to use Route53 for domain management. You do end up paying a nominal fee for routing, but I’ve never paid more than $.40/month (likely since I have so little traffic haha).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-1-hosting-setup&quot;&gt;Step 1: Hosting Setup&lt;/h4&gt;

&lt;p&gt;I like to work from the backend forward and absolutely subscribe to the policy of “Deploy early and deploy often”, so we’ll start here.&lt;/p&gt;

&lt;p&gt;You’ll need to purchase your domain and set up your DNS service which could take a few days to go through. When I bought my first domain with Gandi.net, it took two days, but purchasing through Route53 had me running within 2 hours.&lt;/p&gt;

&lt;p&gt;Once your domain is up and running, you can start configuring your S3 bucket for web hosting. If you’re not familiar with S3 or cloud, these S3 buckets are essentially sectioned out chunks of storage that you can use as repositories for files or data of your choosing-essentially a cloud drive that’s been optimized for hooking into websites. AWS has terrific documentation on how to set this up- it’s straight forward and you don’t really have to understand everything you’re doing so long as you can follow their directions carefully. In short, you’ll need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up two buckets named &lt;em&gt;www.example.com&lt;/em&gt; and &lt;em&gt;example.com&lt;/em&gt; (referred to as hosting bucket moving forward).&lt;/li&gt;
  &lt;li&gt;Set up your &lt;em&gt;www.&lt;/em&gt; bucket to route to your hosting bucket.&lt;/li&gt;
  &lt;li&gt;Enable your hosting bucket to act as a static website host.&lt;/li&gt;
  &lt;li&gt;Add a special permissions policy to your hosting bucket (may need to configure an IAM policy if you don’t have one already).&lt;/li&gt;
  &lt;li&gt;Set your default page name (typically index.html).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see the &lt;a href=&quot;http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html&quot;&gt;AWS docs here&lt;/a&gt; for both gettng a domain through Route53 and . I strongly recommend that you spend time reading through that page and the pages it links to if you’re not sure what you’re doing- it’ll help a great deal to trouble-shoot in case you run into any issues!&lt;/p&gt;

&lt;h4 id=&quot;step-2-jekyll&quot;&gt;Step 2: Jekyll&lt;/h4&gt;

&lt;p&gt;Now it’s time to actually build your site. Using Jekyll is pretty straightforward- mostly you’ll just be doing front-end development work as you craft your html layouts, throwing on CSS and JS to your liking. Jekyll has great integration with Sass, my favorite tool for writing CSS, and it allows you to preview your site build with the simple &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --watch&lt;/code&gt; command. Check out &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;their docs&lt;/a&gt; for help in getting your site up and running.&lt;/p&gt;

&lt;p&gt;I recommend that at this point, you only make a small shell of your site- hell, just use the basic jekyll templated site that they give you out of the box! Getting your continuous deployment set up early will make actually developing your site a breeze since getting your changes live is just a matter of pushing to git master.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://snag.gy/3HzbV.jpg&quot; alt=&quot;initial jekyll file project build&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;margin:0 auto;text-align:center;&quot;&gt;Initial Jekyll file project build&lt;/div&gt;

&lt;p&gt;You’ll want to make sure that you’re pushing to your git host, whether it’s Github or Bitbucket, and be sure to keep your files organized and structured in a sensible way. I strongly recommend sticking as close to Jekyll’s templated structure as you can. Also be sure to update your _config.yml which Jekyll uses to build some global Jekyll metadata into your site for you. This should be at your project root.&lt;/p&gt;

&lt;h4 id=&quot;step-3-gemfile&quot;&gt;Step 3: Gemfile&lt;/h4&gt;

&lt;p&gt;For a standard Jekyll project, a Gemfile likely wouldn’t be necessary. If you’re deploying manually, you won’t need one at all. However, since we’re deploying to Wercker, we need it so that our Wercker box will know what gems to install in order to build our site- namely, the jekyll gem! You’ll also want to add any other gems that are necessary for building your site. Keep it thin or else your builds may start to take a while. Here’s all you need in a basic Gemfile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jekyll'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sass'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m not 100% sure if the Sass gem is needed or if it comes packaged with Jekyll, but just to be safe, I name it explicitly. Be sure to include this in your project root. (Note: Gemfile is for gem management through ‘bundler’; check their docs out &lt;a href=&quot;http://bundler.io/gemfile.html&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;step-4-wercker&quot;&gt;Step 4: Wercker&lt;/h4&gt;

&lt;p&gt;Getting a &lt;a href=&quot;http://wercker.com/&quot;&gt;Wercker&lt;/a&gt; account is as simple as linking to your Github or making your own account. You’ll need to link to your version control tool (again, Github or Bitbucket only at this time!), and once you do, you can start your setup by adding a new application. It’ll sync with your version control and look for the repo that your site code is stored on. Once you get it linked, you’re ready to start configuring.&lt;/p&gt;

&lt;p&gt;First, lets configure our build setup. This is done by making a &lt;code class=&quot;highlighter-rouge&quot;&gt;wercker.yml&lt;/code&gt; at your project root. I use the following code for both projects:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wercker/ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle-install&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;generate site&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build --trace&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;s3sync&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;key_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$KEY&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;key_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$SECRET&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;bucket_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$URL&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;source_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_site/&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
                &lt;span class=&quot;no&quot;&gt;--add-header Cache-Control:max-age=60&lt;/span&gt;
                 &lt;span class=&quot;no&quot;&gt;--no-preserve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://snag.gy/DK8Is.jpg&quot; alt=&quot;Successful wercker build!&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;margin:0 auto;text-align:center;&quot;&gt;Successful Wercker build!&lt;/div&gt;

&lt;p&gt;Note that this is &lt;a href=&quot;http://en.wikipedia.org/wiki/YAML&quot;&gt;yml&lt;/a&gt; so the syntax has to be EXACT- extra spaces or white space can break it without any seeming rhyme or reason. Also, this is using the ‘classic’ Wercker stack- I couldn’t find any information on writing this build config on the new Docker stack, but hopefully I’ll be able to switch over soon. You’ll also notice three variables- $KEY, $SECRET, and $URL. Those will link up with Environmental variables that we’ll set on our wercker deploy config- this keeps our AWS secret credentials hidden since this file must be comitted to source control.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://snag.gy/45QW5.jpg&quot; alt=&quot;Wercker deploy config&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;margin:0 auto;text-align:center;&quot;&gt;Wercker deploy config&lt;/div&gt;

&lt;p&gt;Next we need to go to our Wercker application and get our deploy set up. Go to the application settings and scroll until you find “Add Deploy Target”. I name mine production since I don’t need a test environment- another advantage of using a static site. Be sure to select ‘auto deploy’ and from your main version control, likely called &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we’ll add three variables to our deploy pipeline. Unless you have a specific need to do otherwise, I recommend adding them to this deploy specifically instead of the overall application. Since you’ll need your AWS IAM credentials, keeping them in as small as a scope as is required is overall just best practice. Now we can add:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;KEY - this will be the public key given to you by your AWS IAM account.&lt;/li&gt;
  &lt;li&gt;SECRET - secret key from your AWS IAM account.&lt;/li&gt;
  &lt;li&gt;URL - your website’s base url prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;s3://&lt;/code&gt;. For this site, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;s3://tremulaes.com&lt;/code&gt; (no www.).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although you can hardcode the url directly into your &lt;code class=&quot;highlighter-rouge&quot;&gt;wercker.yml&lt;/code&gt;, I don’t because I’m lazy and want to reuse the exact same file between projects.&lt;/p&gt;

&lt;p&gt;Moving further down, I set my app as public on Wercker since I have no reason not to, but this is up to you. Be sure to hit the ‘Fix Webhook’ button so that it’ll automatically build your site whenever you push to your master branch (as configured above). Just underneath that, you’ll have to choose your ‘Infrastructure’ stack- be sure to update this to ‘Infra stack (classic)’, or ‘Classic (Andorian)’. They’re the same thing but Wercker seems to call it different things, so just choose whatever has ‘classic’ and NOT what has ‘Docker’ in the name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://snag.gy/6jUoa.jpg&quot; alt=&quot;Successful Wercker Deploy!&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;margin:0 auto;text-align:center;&quot;&gt;Successful Wercker deploy!&lt;/div&gt;

&lt;h4 id=&quot;5-testing-and-completion&quot;&gt;5. Testing and Completion&lt;/h4&gt;

&lt;p&gt;Voila! Assuming each individual step has been completed successfully, your public site should be a) live at your url and b) building and deploying with every push to master. If you run into issues, read your build failures carefully and always look first at your config files- &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;wercker.yml&lt;/code&gt;. Google your errors and read through the technical documentation of the services you’re using.&lt;/p&gt;

&lt;p&gt;And be sure to enjoy your new site!&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 08:55:37 -0600</pubDate>
        <link>http://localhost:4000/blog/2015/11/09/static-site-tutorial.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/11/09/static-site-tutorial.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Updated About Me</title>
        <description>&lt;p&gt;I’ve updated my &lt;a href=&quot;/about&quot;&gt;about me&lt;/a&gt; section with some specific content about myself instead of the general Jekyll nonsense. There’s not a whole lot going on with the site yet… I’m still debating which of my old posts I should port over, and how exactly I want this site to look. I really struggle with picking sensible colors; maybe I should ask for help?&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Nov 2015 09:01:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2015/11/07/first-steps.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/11/07/first-steps.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>New Site</title>
        <description>&lt;p&gt;So I guess I am rebuilding my website… again.&lt;/p&gt;

&lt;p&gt;Except this time, it’s too late to not do it. I’ve published my new site, and thrown away all the old stuff (well, it’s in a separate repo, at least). The first time I attempted this, I got distracted by the beautiful rabbit hole of CSS animations and the inevitable understanding that I’m not particularly skilled at the design-y aspects of building a website.&lt;/p&gt;

&lt;p&gt;I got intimidated. I got scared. I got uncomfortable with my inability to build a beautiful, perfectly designed and manicured site from scratch, on my first attempt. So instead, I played around, learned little, and produced nothing.&lt;/p&gt;

&lt;p&gt;Now? I just question why I should be scared. It’ll all work itself out.&lt;/p&gt;

&lt;p&gt;Welcome to my new site. Hope you’ll stick around and enjoy it :)&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Oct 2015 09:55:37 -0500</pubDate>
        <link>http://localhost:4000/blog/2015/10/16/welcome-to-new-site.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2015/10/16/welcome-to-new-site.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Gemfarm Preview</title>
        <description>&lt;h1 id=&quot;new-project-gemfarm&quot;&gt;New Project: Gemfarm&lt;/h1&gt;
&lt;h2 id=&quot;the-inspiration&quot;&gt;The Inspiration&lt;/h2&gt;

&lt;p&gt;Although I have no desire to do it professionally, I’ve always had a desire to do some video game development. My old college roommate and good friend is now a professional indie dev with the &lt;a href=&quot;http://hitboxteam.com/&quot;&gt;Hitbox Team&lt;/a&gt; studio and I was able to meet a lot of other really passionate devs by attending PAX Seattle last summer. Suffice to say, my appetite was whetted.&lt;/p&gt;

&lt;p&gt;After working on a homebrew, ruby CLI version of &lt;a href=&quot;/portfolio/rubysweeper/&quot;&gt;minesweeper&lt;/a&gt;, I wanted to go a lot further. Rather than just a CLI-based game, I wanted something that had visuals and sounds- something that &lt;em&gt;felt&lt;/em&gt; more like a game. So a fellow Dev Bootcamp student and I did some searching, some twitter research, and settled on the simple render library for Ruby called &lt;a href=&quot;http://www.libgosu.org/&quot;&gt;Gosu&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concept&quot;&gt;Concept&lt;/h2&gt;

&lt;p&gt;Although I did want to take a big leap forward from the old CLI-based game, I didn’t want to destroy my own sanity by doing something really out there/crazy or too technically difficult for me. I thought back to some of the oldest/simplest games I could think of and I remembered my childhood love for Pokemon- the &lt;em&gt;original&lt;/em&gt; pokemon, Red and Blue. And I knew it- I wanted a game that looked and felt like an old tile-based, nearly black-and-white game.&lt;/p&gt;

&lt;p&gt;Once I had the aesthetics locked into my head, I knew I’d have to keep the gameplay elements pretty simple- you can’t have an amazing fighting game or shooter using that old style, so I started to think what would be easy to get as a sample. After some consideration, I decided on a farmsim- you’d play a farmer who raised some crops! From there, and some excited chatting with my future coconspirator &lt;a href=&quot;http://marycbaylis.github.io/&quot;&gt;Mary Baylis&lt;/a&gt;, we came up with a few more features, an end game, and some gameplay elements.&lt;/p&gt;

&lt;p&gt;Again, the main goal of this is not to make a revolutionary game- just for development practice. After all, I’ve only been doing development for about 6 weeks right now, and we knew pumping out a game made practically from scratch would be be an enormous challenge. And it is.&lt;/p&gt;

&lt;h2 id=&quot;first-steps&quot;&gt;First Steps&lt;/h2&gt;

&lt;p&gt;The first challenge came from building our little engine from scratch- tile-based movement, animation, and handling the update/draw loops. Gosu is fairly lightweight, having your basic window and drawing controls as well as an update and a draw loop that run 60 ticks/second- and nothing else. We started off by throwing together some really simple 16x16 pixel art and then embarked on the movement engine late on a Saturday night.&lt;/p&gt;

&lt;p&gt;Here’s what we’ve got so far:&lt;/p&gt;

&lt;div class=&quot;video-container&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KDbtDBXPrwM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;There’s a lot more to do for Gemfarm- tons of additional features to implement and work to add in. I spent 4+ hours today tracking down a bug in the movement engine- while adding in the ability to face a new direction when you tap lightly, I exposed an old bug that had been in place but invisible since the first night’s worth of work. Starting to really feel like a developer.&lt;/p&gt;

&lt;p&gt;If you like what you see here and want to learn more about Gemfarm, check out the &lt;a href=&quot;https://github.com/secade/gemfarm&quot;&gt;github repo&lt;/a&gt;- all code is open and available for your viewing pleasure!&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Feb 2015 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2015/02/18/gemfarm_intro.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/02/18/gemfarm_intro.html</guid>
        
        
      </item>
    
  </channel>
</rss>
